// <auto-generated />
using System;
using AMEKSA.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AMEKSA.Migrations
{
    [DbContext(typeof(DbContainer))]
    [Migration("20210831200723_a24")]
    partial class a24
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AMEKSA.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("AccountTypeId");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<DateTime?>("BestTimeFrom");

                    b.Property<DateTime?>("BestTimeTo");

                    b.Property<int?>("CategoryId");

                    b.Property<int?>("DistrictId");

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<short?>("NumberOfDoctors")
                        .HasColumnType("smallint");

                    b.Property<string>("PaymentNote")
                        .HasMaxLength(1000);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15);

                    b.Property<int?>("PurchaseTypeId");

                    b.Property<string>("RelationshipNote")
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("PurchaseTypeId");

                    b.ToTable("account");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountBrandPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<decimal>("Balance")
                        .HasColumnType("money");

                    b.Property<int>("BrandId");

                    b.Property<decimal>("Collection")
                        .HasColumnType("money");

                    b.Property<decimal>("Openning")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("BrandId");

                    b.ToTable("accountBrandPayment");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountMedicalVisit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<string>("AdditionalNotes")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("SubmittingDate");

                    b.Property<DateTime>("SubmittingTime");

                    b.Property<DateTime>("VisitDate");

                    b.Property<string>("VisitNotes")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("VisitTime");

                    b.Property<string>("extendidentityuserid");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("extendidentityuserid");

                    b.ToTable("accountMedicalVisit");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountMedicalVisitChat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountMedicalVisitId");

                    b.Property<string>("ManagerComment")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<DateTime>("ManagerCommentDateTime");

                    b.Property<string>("ManagerId")
                        .IsRequired();

                    b.Property<string>("RepId");

                    b.Property<string>("RepReply")
                        .HasMaxLength(500);

                    b.Property<DateTime>("RepReplyDateTime");

                    b.HasKey("Id");

                    b.HasIndex("AccountMedicalVisitId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("RepId");

                    b.ToTable("accountMedicalVisitChat");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountMedicalVisitPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountMedicalVisitId");

                    b.Property<bool>("Gender");

                    b.Property<string>("PersonName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("PersonPosition")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("AccountMedicalVisitId");

                    b.ToTable("accountMedicalVisitPerson");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountMedicalVisitProducts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountMedicalVisitId");

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("AccountMedicalVisitId");

                    b.HasIndex("ProductId");

                    b.ToTable("accountMedicalVisitProducts");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountMonthlyPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<string>("ExtendIdentityUserId");

                    b.Property<DateTime>("PlannedDate");

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ExtendIdentityUserId");

                    b.ToTable("accountMonthlyPlan");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountMonthlyPlanCollection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountMonthlyPlanId");

                    b.Property<int>("BrandId");

                    b.Property<float?>("Collection");

                    b.HasKey("Id");

                    b.HasIndex("AccountMonthlyPlanId");

                    b.HasIndex("BrandId");

                    b.ToTable("accountMonthlyPlanCollection");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountSalesVisit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<string>("PaymentNotes")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("SubmittingDate");

                    b.Property<DateTime>("SubmittingTime");

                    b.Property<DateTime>("VisitDate");

                    b.Property<string>("VisitNotes")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("VisitTime");

                    b.Property<string>("extendidentityuserid");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("extendidentityuserid");

                    b.ToTable("accountSalesVisit");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountSalesVisitBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountSalesVisitId");

                    b.Property<int>("BrandId");

                    b.HasKey("Id");

                    b.HasIndex("AccountSalesVisitId");

                    b.HasIndex("BrandId");

                    b.ToTable("accountSalesVisitBrand");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountSalesVisitChat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountSalesVisitId");

                    b.Property<string>("ManagerComment")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<DateTime>("ManagerCommentDateTime");

                    b.Property<string>("ManagerId")
                        .IsRequired();

                    b.Property<string>("RepId");

                    b.Property<string>("RepReply")
                        .HasMaxLength(500);

                    b.Property<DateTime>("RepReplyDateTime");

                    b.HasKey("Id");

                    b.HasIndex("AccountSalesVisitId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("RepId");

                    b.ToTable("accountSalesVisitChat");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountSalesVisitCollection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountSalesVisitId");

                    b.Property<int>("BrandId");

                    b.Property<float>("Collection");

                    b.HasKey("Id");

                    b.HasIndex("AccountSalesVisitId");

                    b.HasIndex("BrandId");

                    b.ToTable("accountSalesVisitCollection");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountSalesVisitPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountSalesVisitId");

                    b.Property<bool>("Gender");

                    b.Property<string>("PersonName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("PersonPosition")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("AccountSalesVisitId");

                    b.ToTable("accountSalesVisitPerson");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountTypeName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("accountType");
                });

            modelBuilder.Entity("AMEKSA.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("brand");
                });

            modelBuilder.Entity("AMEKSA.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.HasKey("Id");

                    b.ToTable("category");
                });

            modelBuilder.Entity("AMEKSA.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("city");
                });

            modelBuilder.Entity("AMEKSA.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountId");

                    b.Property<string>("Address")
                        .HasMaxLength(300);

                    b.Property<DateTime?>("BestTimeFrom");

                    b.Property<DateTime?>("BestTimeTo");

                    b.Property<int?>("CategoryId");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("ContactTypeId");

                    b.Property<int?>("DistrictId");

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<bool>("Gender");

                    b.Property<string>("LandLineNumber")
                        .HasMaxLength(15);

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(15);

                    b.Property<string>("PaymentNotes")
                        .HasMaxLength(1000);

                    b.Property<int?>("PurchaseTypeId");

                    b.Property<string>("RelationshipNote")
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ContactTypeId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("PurchaseTypeId");

                    b.ToTable("contact");
                });

            modelBuilder.Entity("AMEKSA.Entities.ContactMedicalVisit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContactId");

                    b.Property<string>("Requests")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("SubmittingDate");

                    b.Property<DateTime>("SubmittingTime");

                    b.Property<DateTime>("VisitDate");

                    b.Property<string>("VisitNotes")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("VisitTime");

                    b.Property<string>("extendidentityuserid");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("extendidentityuserid");

                    b.ToTable("contactMedicalVisit");
                });

            modelBuilder.Entity("AMEKSA.Entities.ContactMedicalVisitChat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContactMedicalVisitId");

                    b.Property<string>("ManagerComment")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<DateTime>("ManagerCommentDateTime");

                    b.Property<string>("ManagerId")
                        .IsRequired();

                    b.Property<string>("RepId");

                    b.Property<string>("RepReply")
                        .HasMaxLength(500);

                    b.Property<DateTime>("RepReplyDateTime");

                    b.HasKey("Id");

                    b.HasIndex("ContactMedicalVisitId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("RepId");

                    b.ToTable("contactMedicalVisitChat");
                });

            modelBuilder.Entity("AMEKSA.Entities.ContactMedicalVisitProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContactMedicalVisitId");

                    b.Property<byte>("NumberOfSamples")
                        .HasColumnType("tinyint");

                    b.Property<int>("ProductId");

                    b.Property<byte>("ProductShare")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("ContactMedicalVisitId");

                    b.HasIndex("ProductId");

                    b.ToTable("contactMedicalVisitProduct");
                });

            modelBuilder.Entity("AMEKSA.Entities.ContactMonthlyPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContactId");

                    b.Property<string>("ExtendIdentityUserId");

                    b.Property<DateTime>("PlannedDate");

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("ExtendIdentityUserId");

                    b.ToTable("contactMonthlyPlan");
                });

            modelBuilder.Entity("AMEKSA.Entities.ContactSalesAid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContactMedicalVisitId");

                    b.Property<int>("SalesAidId");

                    b.HasKey("Id");

                    b.HasIndex("ContactMedicalVisitId");

                    b.HasIndex("SalesAidId");

                    b.ToTable("contactSalesAid");
                });

            modelBuilder.Entity("AMEKSA.Entities.ContactType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactTypeName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("contactType");
                });

            modelBuilder.Entity("AMEKSA.Entities.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("district");
                });

            modelBuilder.Entity("AMEKSA.Entities.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.ToTable("menu");
                });

            modelBuilder.Entity("AMEKSA.Entities.OpenningRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountBrandPaymentId");

                    b.Property<bool>("Confirmed");

                    b.Property<string>("ExtendIdentityUserId");

                    b.Property<bool>("Rejected");

                    b.Property<decimal>("RequestedOpenning")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("AccountBrandPaymentId");

                    b.HasIndex("ExtendIdentityUserId");

                    b.ToTable("openningRequest");
                });

            modelBuilder.Entity("AMEKSA.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("product");
                });

            modelBuilder.Entity("AMEKSA.Entities.Properties", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PropertyName");

                    b.Property<int>("Value");

                    b.HasKey("Id");

                    b.ToTable("properties");
                });

            modelBuilder.Entity("AMEKSA.Entities.PurchaseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PurchaseTypeName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("purchaseType");
                });

            modelBuilder.Entity("AMEKSA.Entities.RequestDeleteAccountMedical", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountMedicalVisitId");

                    b.HasKey("Id");

                    b.HasIndex("AccountMedicalVisitId");

                    b.ToTable("requestDeleteAccountMedical");
                });

            modelBuilder.Entity("AMEKSA.Entities.RequestDeleteAccountSales", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountSalesVisitId");

                    b.HasKey("Id");

                    b.HasIndex("AccountSalesVisitId");

                    b.ToTable("requestDeleteAccountSales");
                });

            modelBuilder.Entity("AMEKSA.Entities.RequestDeleteContactMedical", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContactMedicalVisitId");

                    b.HasKey("Id");

                    b.HasIndex("ContactMedicalVisitId");

                    b.ToTable("requestDeleteContactMedical");
                });

            modelBuilder.Entity("AMEKSA.Entities.RoleMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MenuId");

                    b.Property<string>("extendidentityroleId");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("extendidentityroleId");

                    b.ToTable("roleMenu");
                });

            modelBuilder.Entity("AMEKSA.Entities.SalesAid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SalesAidName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("show");

                    b.HasKey("Id");

                    b.ToTable("salesAid");
                });

            modelBuilder.Entity("AMEKSA.Entities.TimeOffTerritoryReasons", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Reason");

                    b.HasKey("Id");

                    b.ToTable("timeOffTerrirtoryReasons");
                });

            modelBuilder.Entity("AMEKSA.Entities.UserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<string>("extendidentityuserid");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("extendidentityuserid");

                    b.ToTable("userAccount");
                });

            modelBuilder.Entity("AMEKSA.Entities.UserBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId");

                    b.Property<string>("extendidentityuserid");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("extendidentityuserid");

                    b.ToTable("userBrand");
                });

            modelBuilder.Entity("AMEKSA.Entities.UserContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContactId");

                    b.Property<int?>("MonthlyTarget");

                    b.Property<string>("extendidentityuserid");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("extendidentityuserid");

                    b.ToTable("userContact");
                });

            modelBuilder.Entity("AMEKSA.Entities.UserTimeOff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTimeFrom");

                    b.Property<DateTime>("DateTimeTo");

                    b.Property<string>("Description");

                    b.Property<string>("ExtendIdentityUserId");

                    b.Property<int>("TimeOffTerritoryReasonsId");

                    b.HasKey("Id");

                    b.HasIndex("ExtendIdentityUserId");

                    b.HasIndex("TimeOffTerritoryReasonsId");

                    b.ToTable("userTimeOff");
                });

            modelBuilder.Entity("AMEKSA.Entities.VacancyRequests", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Accepted");

                    b.Property<string>("Description");

                    b.Property<bool>("Rejected");

                    b.Property<int>("TimeOffTerritoryReasonsId");

                    b.Property<DateTime>("VacancyDateTimeFrom");

                    b.Property<DateTime>("VacancyDateTimeTo");

                    b.Property<string>("extendidentityuserid");

                    b.HasKey("Id");

                    b.HasIndex("TimeOffTerritoryReasonsId");

                    b.HasIndex("extendidentityuserid");

                    b.ToTable("vacancyRequests");
                });

            modelBuilder.Entity("AMEKSA.Entities.WorkingDays", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Month");

                    b.Property<int?>("NumberOfWorkingDays");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.ToTable("workingDays");
                });

            modelBuilder.Entity("AMEKSA.Privilage.ExtendIdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("AMEKSA.Privilage.ExtendIdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<bool>("Active");

                    b.Property<int?>("CityId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<string>("extendidentityuserid");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("extendidentityuserid");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AMEKSA.Entities.Account", b =>
                {
                    b.HasOne("AMEKSA.Entities.AccountType", "accounttype")
                        .WithMany("account")
                        .HasForeignKey("AccountTypeId");

                    b.HasOne("AMEKSA.Entities.Category", "category")
                        .WithMany("account")
                        .HasForeignKey("CategoryId");

                    b.HasOne("AMEKSA.Entities.District", "district")
                        .WithMany("account")
                        .HasForeignKey("DistrictId");

                    b.HasOne("AMEKSA.Entities.PurchaseType", "purchasetype")
                        .WithMany("account")
                        .HasForeignKey("PurchaseTypeId");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountBrandPayment", b =>
                {
                    b.HasOne("AMEKSA.Entities.Account", "account")
                        .WithMany("accountbrandpayment")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AMEKSA.Entities.Brand", "brand")
                        .WithMany("accountbrandpayment")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountMedicalVisit", b =>
                {
                    b.HasOne("AMEKSA.Entities.Account", "account")
                        .WithMany("accountmedicalvisit")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "extendidentityuser")
                        .WithMany("accountmedicalvisit")
                        .HasForeignKey("extendidentityuserid");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountMedicalVisitChat", b =>
                {
                    b.HasOne("AMEKSA.Entities.AccountMedicalVisit", "AccountMedicalVisit")
                        .WithMany()
                        .HasForeignKey("AccountMedicalVisitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "Rep")
                        .WithMany()
                        .HasForeignKey("RepId");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountMedicalVisitPerson", b =>
                {
                    b.HasOne("AMEKSA.Entities.AccountMedicalVisit", "accountmedicalvisit")
                        .WithMany("accountmedicalvisitperson")
                        .HasForeignKey("AccountMedicalVisitId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountMedicalVisitProducts", b =>
                {
                    b.HasOne("AMEKSA.Entities.AccountMedicalVisit", "accountmedicalvisit")
                        .WithMany("accountmedicalvisitproducts")
                        .HasForeignKey("AccountMedicalVisitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AMEKSA.Entities.Product", "product")
                        .WithMany("accountmedicalvisitproducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountMonthlyPlan", b =>
                {
                    b.HasOne("AMEKSA.Entities.Account", "account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "extendidentityuser")
                        .WithMany()
                        .HasForeignKey("ExtendIdentityUserId");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountMonthlyPlanCollection", b =>
                {
                    b.HasOne("AMEKSA.Entities.AccountMonthlyPlan", "accountMonthlyPlan")
                        .WithMany("accountMonthlyPlanCollection")
                        .HasForeignKey("AccountMonthlyPlanId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AMEKSA.Entities.Brand", "brand")
                        .WithMany("accountMonthlyPlanCollection")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountSalesVisit", b =>
                {
                    b.HasOne("AMEKSA.Entities.Account", "account")
                        .WithMany("accountsalesvisit")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "extendidentityuser")
                        .WithMany("accountsalesvisit")
                        .HasForeignKey("extendidentityuserid");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountSalesVisitBrand", b =>
                {
                    b.HasOne("AMEKSA.Entities.AccountSalesVisit", "accountsalesvisit")
                        .WithMany("accountsalesvisitbrand")
                        .HasForeignKey("AccountSalesVisitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AMEKSA.Entities.Brand", "brand")
                        .WithMany("accountsalesvisitbrand")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountSalesVisitChat", b =>
                {
                    b.HasOne("AMEKSA.Entities.AccountSalesVisit", "AccountSalesVisit")
                        .WithMany()
                        .HasForeignKey("AccountSalesVisitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "Rep")
                        .WithMany()
                        .HasForeignKey("RepId");
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountSalesVisitCollection", b =>
                {
                    b.HasOne("AMEKSA.Entities.AccountSalesVisit", "accountsalesvisit")
                        .WithMany("accountSalesVisitCollection")
                        .HasForeignKey("AccountSalesVisitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AMEKSA.Entities.Brand", "brand")
                        .WithMany("accountSalesVisitCollection")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AMEKSA.Entities.AccountSalesVisitPerson", b =>
                {
                    b.HasOne("AMEKSA.Entities.AccountSalesVisit", "accountsalesvisit")
                        .WithMany("accountsalesvisitperson")
                        .HasForeignKey("AccountSalesVisitId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AMEKSA.Entities.Contact", b =>
                {
                    b.HasOne("AMEKSA.Entities.Account", "account")
                        .WithMany("contact")
                        .HasForeignKey("AccountId");

                    b.HasOne("AMEKSA.Entities.Category", "category")
                        .WithMany("contact")
                        .HasForeignKey("CategoryId");

                    b.HasOne("AMEKSA.Entities.ContactType", "contacttype")
                        .WithMany("contact")
                        .HasForeignKey("ContactTypeId");

                    b.HasOne("AMEKSA.Entities.District", "district")
                        .WithMany("contact")
                        .HasForeignKey("DistrictId");

                    b.HasOne("AMEKSA.Entities.PurchaseType", "purchasetype")
                        .WithMany("contact")
                        .HasForeignKey("PurchaseTypeId");
                });

            modelBuilder.Entity("AMEKSA.Entities.ContactMedicalVisit", b =>
                {
                    b.HasOne("AMEKSA.Entities.Contact", "contact")
                        .WithMany("contactmedicalvisit")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "extendidentityuser")
                        .WithMany("contactmedicalvisit")
                        .HasForeignKey("extendidentityuserid");
                });

            modelBuilder.Entity("AMEKSA.Entities.ContactMedicalVisitChat", b =>
                {
                    b.HasOne("AMEKSA.Entities.ContactMedicalVisit", "ContactMedicalVisit")
                        .WithMany()
                        .HasForeignKey("ContactMedicalVisitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "Rep")
                        .WithMany()
                        .HasForeignKey("RepId");
                });

            modelBuilder.Entity("AMEKSA.Entities.ContactMedicalVisitProduct", b =>
                {
                    b.HasOne("AMEKSA.Entities.ContactMedicalVisit", "contactvisitmedical")
                        .WithMany("contactmedicalvisitproduct")
                        .HasForeignKey("ContactMedicalVisitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AMEKSA.Entities.Product", "product")
                        .WithMany("contactmedicalvisitproduct")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AMEKSA.Entities.ContactMonthlyPlan", b =>
                {
                    b.HasOne("AMEKSA.Entities.Contact", "contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "extendidentityuser")
                        .WithMany()
                        .HasForeignKey("ExtendIdentityUserId");
                });

            modelBuilder.Entity("AMEKSA.Entities.ContactSalesAid", b =>
                {
                    b.HasOne("AMEKSA.Entities.ContactMedicalVisit", "contactmedicalvisit")
                        .WithMany("contactsalesaid")
                        .HasForeignKey("ContactMedicalVisitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AMEKSA.Entities.SalesAid", "salesaid")
                        .WithMany("contactsalesaid")
                        .HasForeignKey("SalesAidId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AMEKSA.Entities.District", b =>
                {
                    b.HasOne("AMEKSA.Entities.City", "city")
                        .WithMany("district")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AMEKSA.Entities.OpenningRequest", b =>
                {
                    b.HasOne("AMEKSA.Entities.AccountBrandPayment", "accountbrandpayment")
                        .WithMany()
                        .HasForeignKey("AccountBrandPaymentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "extendidentityuser")
                        .WithMany()
                        .HasForeignKey("ExtendIdentityUserId");
                });

            modelBuilder.Entity("AMEKSA.Entities.Product", b =>
                {
                    b.HasOne("AMEKSA.Entities.Brand", "brand")
                        .WithMany("product")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AMEKSA.Entities.RequestDeleteAccountMedical", b =>
                {
                    b.HasOne("AMEKSA.Entities.AccountMedicalVisit", "accountmedicalvisit")
                        .WithMany()
                        .HasForeignKey("AccountMedicalVisitId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AMEKSA.Entities.RequestDeleteAccountSales", b =>
                {
                    b.HasOne("AMEKSA.Entities.AccountSalesVisit", "AccountSalesVisit")
                        .WithMany()
                        .HasForeignKey("AccountSalesVisitId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AMEKSA.Entities.RequestDeleteContactMedical", b =>
                {
                    b.HasOne("AMEKSA.Entities.ContactMedicalVisit", "contactmedicalvisit")
                        .WithMany()
                        .HasForeignKey("ContactMedicalVisitId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AMEKSA.Entities.RoleMenu", b =>
                {
                    b.HasOne("AMEKSA.Entities.Menu", "menu")
                        .WithMany("rolemenu")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AMEKSA.Privilage.ExtendIdentityRole", "extendidentityrole")
                        .WithMany("rolemenu")
                        .HasForeignKey("extendidentityroleId");
                });

            modelBuilder.Entity("AMEKSA.Entities.UserAccount", b =>
                {
                    b.HasOne("AMEKSA.Entities.Account", "account")
                        .WithMany("useraccount")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "extendidentityuser")
                        .WithMany("useraccount")
                        .HasForeignKey("extendidentityuserid");
                });

            modelBuilder.Entity("AMEKSA.Entities.UserBrand", b =>
                {
                    b.HasOne("AMEKSA.Entities.Brand", "brand")
                        .WithMany("userbrand")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "extendidentityuser")
                        .WithMany("userbrand")
                        .HasForeignKey("extendidentityuserid");
                });

            modelBuilder.Entity("AMEKSA.Entities.UserContact", b =>
                {
                    b.HasOne("AMEKSA.Entities.Contact", "contact")
                        .WithMany("usercontact")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "extendidentityuser")
                        .WithMany("usercontact")
                        .HasForeignKey("extendidentityuserid");
                });

            modelBuilder.Entity("AMEKSA.Entities.UserTimeOff", b =>
                {
                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "extendidentityuser")
                        .WithMany()
                        .HasForeignKey("ExtendIdentityUserId");

                    b.HasOne("AMEKSA.Entities.TimeOffTerritoryReasons", "timeoffterritroyreasons")
                        .WithMany()
                        .HasForeignKey("TimeOffTerritoryReasonsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AMEKSA.Entities.VacancyRequests", b =>
                {
                    b.HasOne("AMEKSA.Entities.TimeOffTerritoryReasons", "timeoffterritoryreasons")
                        .WithMany()
                        .HasForeignKey("TimeOffTerritoryReasonsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "extendidentityuser")
                        .WithMany()
                        .HasForeignKey("extendidentityuserid");
                });

            modelBuilder.Entity("AMEKSA.Privilage.ExtendIdentityUser", b =>
                {
                    b.HasOne("AMEKSA.Entities.City", "city")
                        .WithMany("extendIdentityUsers")
                        .HasForeignKey("CityId");

                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser", "extendidentityuser")
                        .WithMany()
                        .HasForeignKey("extendidentityuserid");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("AMEKSA.Privilage.ExtendIdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("AMEKSA.Privilage.ExtendIdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AMEKSA.Privilage.ExtendIdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
